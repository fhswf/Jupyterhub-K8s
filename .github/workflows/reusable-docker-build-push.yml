name: Build and push images to registry

env:
  OWNER: ${{ github.repository }}
  REGISTRY: ghcr.io

on:
  workflow_call:
    inputs:
      image:
        description: Image name
        required: true
        type: string
      folder:
        description: Location and build context of the Dockerfile folder
        required: true
        type: string
      buildargs:
        description: build-args for docker build action (new line delimitated yaml like list)
        required: false
        type: string
        default: ""
    outputs:
      tags:
        description: "tags"
        value: ${{ jobs.build-push.outputs.tags }}
      labels:
        description: "labels"
        value: ${{ jobs.build-push.outputs.labels }}
      image:
        description: "image"
        value: ${{ jobs.build-push.outputs.image }}
      metadata:
        description: metadata of image
        value: ${{ jobs.build-push.outputs.metadata }}

jobs:
  build-push:
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      metadata: ${{ steps.build.outputs.metadata }}
      image: ${{ inputs.image }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        # disable attestations for now, see https://github.com/orgs/community/discussions/45969
        uses: docker/setup-buildx-action@15c905b16b06416d2086efa066dd8e3a35cc7f98
        with:
          driver-opts: "image=moby/buildkit:v0.10.5"

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: create image name based on build args
        id: imagename
        run: |
          image_name=`echo "${{inputs.buildargs}}" | awk -F'=' '{print $2}' | tr -d '[:blank:]' | tr  -s '\n' '-' | sed 's/-$//'`
          if [ "$image_name" != "" ]; then image_name="-$image_name" ; fi
          echo "$image_name"
          echo "imagename=$image_name" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images:  ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ inputs.image }}${{ steps.imagename.outputs.imagename }}
          #images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ inputs.image }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          labels: |
            org.opencontainers.image.title=${{ inputs.image }}
            org.opencontainers.image.src=${{ github.event.repository.html_url }}

      - name: Show metadata
        run: |
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: ./${{ inputs.folder }}/.
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ inputs.buildargs }}

      #- name: setoutput
      #  id: setoutput
      #  run: |
      #    echo "tags=${{ steps.meta.outputs.tags }}" >> "$GITHUB_OUTPUT"
      #    echo "lables=${{ steps.meta.outputs.lables }}" >> "$GITHUB_OUTPUT"
      #    echo "tags=${{ inputs.image }}" >> "$GITHUB_OUTPUT"


