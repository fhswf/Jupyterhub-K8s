## This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/
#
# deploy or upgrade juypterhub:
# helm upgrade --cleanup-on-fail --install jupyterhub jupyterhub/jupyterhub --namespace jupyterhub --create-namespace --version=2.0.0 --values values.yaml
# adjust version as neccessary

custom:
  keycloak_client_id: jupyter-oidc-id"
  keycloak_client_secret: "openssl rand -hex 32"
  keycloak_oauthcallback: "https://<host>/jupyterhub/keycloak/oauth_callback"
  lti_shared_secret: "openssl rand -hex 32" # note that the provider needs this key
  lti_client_key: "openssl rand -hex 32"

hub:
  image:
    name: ghcr.io/fhswf/jupyterhub-k8s/jupyterhub
    tag: latest
    pullPolicy: "Always"
  baseUrl: /jupyterhub

  extraConfig:
    myConfig.py: |
      from multiauthenticator.multiauthenticator import MultiAuthenticator
      from ltiauthenticator import LTIAuthenticator
      from oauthenticator.generic import GenericOAuthenticator

      keycloak_client_secret = get_config("custom.keycloak_client_secret")
      keycloak_oauthcallback = get_config("custom.keycloak_oauthcallback")
      keycloak_client_id = get_config("custom.keycloak_client_id")

      lti_shared_secret = get_config("custom.lti_shared_secret")
      lti_client_key = get_config("custom.lti_client_key")

      # specific for multiauth:
      # select login options
      c.MultiAuthenticator.authenticators = [
          (LTIAuthenticator, "", False, {
              "consumers": {lti_client_key: lti_shared_secret},
              "username_key": "ext_user_username"
          }),
          (GenericOAuthenticator, "keycloak", True, {
              "client_id": str(keycloak_client_id),
              "client_secret": str(keycloak_client_secret),
              "oauth_callback_url": str(keycloak_oauthcallback),
              "authorize_url": "https://<host>/keycloak/realms/<keycloakrealm>/protocol/openid-connect/auth",
              "token_url": "https://<host>/keycloak/realms/<keycloakrealm>/protocol/openid-connect/token",
              "userdata_url": "https://<host>/keycloak/realms/<keycloakrealm>/protocol/openid-connect/userinfo",
              "login_service": "keycloak",
              "username_key": "preferred_username",
              "scope": ["openid"],
              "userdata_params": {"state": "state"},           
          })
      ]
      c.JupyterHub.authenticator_class = MultiAuthenticator

singleuser:
  cpu:
    limit: 28
    guarantee: 2
  memory:
    limit: 128G
    guarantee: 2G
  startTimeout: 200

  # leave cmd empty to start the container default.
  # This requires the command in the image to launch jupyter-singleuser at some point,
  # this is always the case for all base images from the docker-stacks foundation.
  cmd: 
  storage:
    extraVolumes:
      - name: dshm # needed for pytorch
        emptyDir:
          medium: Memory
          sizeLimit: "8Gi"
      - name: newhub-shared-data # some shared data
        nfs:
          server: <nfs-serverhost>
          path: /<some path>/data
          
    extraVolumeMounts:
      - name: dshm
        mountPath: /dev/shm
      - name: newhub-shared-data
        mountPath: /home/shared

  profileList:
    - display_name: "Deep Learning and Datascience"
      description: "Tensorflow, Keras, PyTorch, SciPy, SK-Learn, Pandas, Huggingface and more."
      kubespawner_override:
        image: ghcr.io/fhswf/jupyterhub-k8s/deepml:sha-3412731
      profile_options:
        gpu:
          display_name: "Shared GPU count"
          choices:
            one:
              display_name: "1"
              default: true
              kubespawner_override: 
                extra_resource_limits:
                  nvidia.com/gpu: "1"
            two:
              display_name: "2"
              kubespawner_override: 
                extra_resource_limits:
                  nvidia.com/gpu: "2"
